name: API Tests (Postman/Newman)
on:
  push:
    branches: [ "main" ]
    paths:
      - "Api.java"
      - ".github/workflows/api-tests.yml"
      - "postman/**"
  workflow_dispatch: {}

jobs:
  api-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Compile API (single file)
        run: |
          set -e
          if [ ! -f Api.java ]; then
            echo "::error file=Api.java::Api.java no existe en la raÃ­z del repo"
            exit 1
          fi
          javac Api.java

- name: Start API server
  run: |
    set -e
    nohup java --add-modules jdk.httpserver Api > server.log 2>&1 &
    echo $! > server.pid
    # Wait until "/" returns 200 (means the server is up and contexts are loaded)
    for i in {1..30}; do
      code=$(curl -s -o resp.txt -w "%{http_code}" http://127.0.0.1:8080/)
      if [ "$code" = "200" ]; then
        echo "Server is up"; rm -f resp.txt; exit 0
      fi
      echo "Probe got HTTP $code; body:"; cat resp.txt || true
      sleep 1
    done
    echo "::error::Server did not respond 200 on /"
    echo "---- First 200 lines of server.log ----"
    sed -n '1,200p' server.log || true
    exit 1

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Newman
        run: npm install -g newman newman-reporter-htmlextra

      - name: Write Postman collection & env
        run: |
          mkdir -p postman
          cat > postman/collection.json <<'JSON'
          {
            "info": { "name": "ConstruccionYPruebas API Tests", "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json" },
            "item": [
              {
                "name": "Fibonacci OK (n=10 -> 55)",
                "request": { "method": "GET", "url": "{{baseUrl}}/fib", "query": [{ "key": "n", "value": "10" }] },
                "event": [{ "listen": "test", "script": { "exec": [
                  "pm.test('status 200', () => pm.response.to.have.status(200));",
                  "const json = pm.response.json();",
                  "pm.test('n=10, value=55', () => { pm.expect(json.n).to.eql(10); pm.expect(json.value).to.eql(55); });"
                ], "type": "text/javascript" }}]
              },
              {
                "name": "Fibonacci Bad Request (n<0)",
                "request": { "method": "GET", "url": "{{baseUrl}}/fib", "query": [{ "key": "n", "value": "-1" }] },
                "event": [{ "listen": "test", "script": { "exec": [
                  "pm.test('status 400', () => pm.response.to.have.status(400));",
                  "pm.test('error message present', () => pm.expect(pm.response.json().error).to.match(/n must be >= 0/i));"
                ], "type": "text/javascript" }}]
              },
              {
                "name": "Multiply OK (6*7 -> 42)",
                "request": { "method": "GET", "url": "{{baseUrl}}/multiply", "query": [
                  { "key": "a", "value": "6" }, { "key": "b", "value": "7" }
                ]},
                "event": [{ "listen": "test", "script": { "exec": [
                  "pm.test('status 200', () => pm.response.to.have.status(200));",
                  "pm.test('product 42', () => pm.expect(pm.response.json().product).to.eql(42));"
                ], "type": "text/javascript" }}]
              }
            ]
          }
          JSON
          cat > postman/env.json <<'JSON'
          { "name": "Localhost 8080", "values": [
              { "key": "baseUrl", "value": "http://localhost:8080", "enabled": true }
            ], "_postman_variable_scope": "environment" }
          JSON

      - name: Run Newman
        run: |
          set -e
          newman run postman/collection.json \
            -e postman/env.json \
            -r cli,htmlextra \
            --reporter-htmlextra-export postman/newman-report.html

      - name: Attach logs to summary
        if: always()
        run: |
          echo "## Server log (last 200 lines)" >> $GITHUB_STEP_SUMMARY
          (tail -n 200 server.log || true) >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f postman/newman-report.html ]; then
            echo "Newman HTML report will be uploaded as artifact." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload artifacts (report + server log)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-test-report
          path: |
            postman/newman-report.html
            server.log
