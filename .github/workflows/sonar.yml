name: Build + SonarCloud + Report
on:
  push: { branches: [ "main", "master" ] }
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: read

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Build & test (creates JaCoCo XML)
        run: mvn -B -DskipTests=false clean verify

      - name: SonarCloud scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.organization=construccionypruebas
            -Dsonar.projectKey=ConstruccionYPruebas_ConstruccionYPruebas
            -Dsonar.sources=src/main/java
            -Dsonar.tests=src/test/java
            -Dsonar.java.binaries=target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
            -Dsonar.junit.reportPaths=target/surefire-reports
            -Dsonar.qualitygate.wait=true

      # Ensure these run even if the gate fails
      - name: Install jq
        if: always()
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate SonarCloud report (metrics + issues)
        if: always()
        env:
          PROJECT: ConstruccionYPruebas_ConstruccionYPruebas
        run: |
          # 1) Key metrics
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/measures/component?component=$PROJECT&metricKeys=coverage,bugs,vulnerabilities,code_smells,duplicated_lines_density" \
            > measures.json

          # 2) Prioritized issues (BLOCKER/CRITICAL/MAJOR)
          curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "https://sonarcloud.io/api/issues/search?componentKeys=$PROJECT&types=BUG,VULNERABILITY,CODE_SMELL&severities=BLOCKER,CRITICAL,MAJOR&ps=500" \
            > issues.json

          # Safeguards so files are never empty
          [ -s measures.json ] || echo '{"component":{"measures":[]}}' > measures.json
          [ -s issues.json ] || echo '{"issues":[]}' > issues.json

          COVERAGE=$(jq -r '.component.measures[] | select(.metric=="coverage") | .value // "0.0"' measures.json)
          BUGS=$(jq -r '.component.measures[] | select(.metric=="bugs") | .value // "0"' measures.json)
          VULNS=$(jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value // "0"' measures.json)
          SMELLS=$(jq -r '.component.measures[] | select(.metric=="code_smells") | .value // "0"' measures.json)
          DUPL=$(jq -r '.component.measures[] | select(.metric=="duplicated_lines_density") | .value // "0.0"' measures.json)

          {
            echo "# Informe SonarCloud"
            echo
            echo "## MÃ©tricas clave"
            echo "- **Coverage**: ${COVERAGE}%"
            echo "- **Bugs**: ${BUGS}"
            echo "- **Vulnerabilities**: ${VULNS}"
            echo "- **Code Smells**: ${SMELLS}"
            echo "- **Duplicated lines (%)**: ${DUPL}"
            echo
            echo "## Hallazgos priorizados (BLOCKER/CRITICAL/MAJOR)"
            echo
            echo "| Type | Severity | File | Line | Message |"
            echo "|------|----------|------|------|---------|"
            jq -r '
              .issues
              | sort_by(
                  ( .severity | if .=="BLOCKER" then 0 elif .=="CRITICAL" then 1 elif .=="MAJOR" then 2 elif .=="MINOR" then 3 else 4 end ),
                  .type
                )
              | .[]
              | "| \(.type) | \(.severity) | \(.component) | \((.line//"")) | \((.message|gsub("\\n"; " "))) |"
            ' issues.json || true
          } > sonar-report.md

          # Also show in the run Summary
          cat sonar-report.md >> "$GITHUB_STEP_SUMMARY"

          # CSV export
          jq -r '
            ["type","severity","rule","file","line","message"],
            (.issues[] | [ .type, .severity, .rule, .component, (.line//""), (.message|gsub("\\n"; " ")) ])
            | @csv
          ' issues.json > issues.csv

      - name: Upload report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sonar-report
          path: |
            sonar-report.md
            measures.json
            issues.json
            issues.csv

            issues.json
            issues.csv
